/*
 * Copyright (c) 2000, 2020, Oracle and/or its affiliates.
 *
 * Licensed under the Universal Permissive License v 1.0 as shown at
 * http://oss.oracle.com/licenses/upl.
 */
#ifndef COH_ABSTRACT_SPEC_HPP
#define COH_ABSTRACT_SPEC_HPP

#include "coherence/lang/compatibility.hpp"

#include "coherence/lang/class_spec.hpp"

COH_OPEN_NAMESPACE2(coherence,lang)

class Object;

/**
* Helper for defining an abstract managed class.
*
* Managed classes are implementations of coherence::lang::Object, and include
* a set of well known features, which are auto-generated by this helper class:
*
* - Handle/View/Holder definitions
* - super class definition
* - virtual interface inheritance of up to 16 interfaces
*
* The template takes three parameters:
*
* - The name of the class being defined
* - The defined classes parent class, indicated as extends<parent>
* - An optional list of interfaces to implement, indicated as
*   implements<i1, i2, ...>
*
* A normal class definition would be:
* @code
* class Bar
*   : public abstract_spec<Bar,
*       extends<Object>,
*       implements<SomeInterface, SomeOtherInterface> >
*   {
*   public:
*       // normal abstract class definition....
*   };
* @endcode
*
* @see extends
* @see implements
*
* @author mf 2008.07.14
*/
template<class T, class E = extends<Object>, class I = implements<> >
class COH_EXPORT_SPEC abstract_spec
    : public class_spec<T, E, I>
    {
    // ----- typedefs -------------------------------------------------------

    public:
        /**
        * Specification definition
        */
        typedef abstract_spec this_spec;

        /**
        * Definition T's parent class
        */
        typedef abstract_spec super;

        /**
        * Definition of the spec's parent class
        */
        typedef class_spec<T, E, I> super_spec;


    // ----- constructors ---------------------------------------------------

    protected:
        /**
        * Generate a set of proxy constructors matching the signatures of the
        * parent class's constructors.
        *
        * NOTE: Compilation errors referencing this line likely indicate that
        *       class being defined by this spec makes calls a "super"
        *       constructor supplying a set of parameters for which there is
        *       no exact match on the parent class.
        */
        COH_DEFINE_PROXY_CONSTRUCTORS(abstract_spec)

    private:
        /**
        * @internal
        *
        * Hide inherited create methods, as abstract objects cannot be
        * instantiated.
        */
        static void create()
            {
            }

    public:
        /**
        * {@inheritDoc}
        *
        * Pure virtual clone definition ensures that the resulting class is
        * abstract.
        */
        virtual TypedHandle<Object> clone() const = 0;
    };

COH_CLOSE_NAMESPACE2

#endif // COH_ABSTRACT_SPEC_HPP
